{
  "consumes": [
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the API for the application.\n\nSwagger 2.0 Spec - generated by [go-swagger](https://github.com/go-swagger/go-swagger)",
    "title": "Web API",
    "version": "2.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/v1": {
      "get": {
        "tags": [
          "root"
        ],
        "summary": "Display an ok message.",
        "operationId": "RootIndex",
        "responses": {
          "200": {
            "$ref": "#/responses/RootIndexResponse"
          }
        }
      }
    },
    "/v1/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Return all users.",
        "operationId": "UserIndex",
        "responses": {
          "201": {
            "$ref": "#/responses/CreatedResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a user.",
        "operationId": "UserCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "FirstName",
            "name": "first_name",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "LastName",
            "name": "last_name",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Email",
            "name": "email",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Password",
            "name": "password",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/CreatedResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete all users.",
        "operationId": "UserDestroyAll",
        "responses": {
          "200": {
            "$ref": "#/responses/CreatedResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/v1/user/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Return one user.",
        "operationId": "UserShow",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "UserID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/CreatedResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Make changes to a user.",
        "operationId": "UserUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "UserID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "FirstName",
            "name": "first_name",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "LastName",
            "name": "last_name",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Email",
            "name": "email",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Password",
            "name": "password",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/CreatedResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a user.",
        "operationId": "UserDestroy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "UserID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/CreatedResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    }
  },
  "responses": {
    "BadRequestResponse": {
      "description": "BadRequestResponse returns 400.",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "CreatedResponse": {
      "description": "CreatedResponse returns 201.",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "record_id": {
            "description": "RecordID can be used for returning the ID from a row.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "RecordID"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "ErrorResponse": {
      "description": "ErrorResponse is a standard error response.",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "InternalServerErrorResponse": {
      "description": "InternalServerErrorResponse returns 500.",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "NotFoundResponse": {
      "description": "NotFoundResponse returns 404.",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "RootIndexResponse": {
      "description": "Response returns 200.",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "UnauthorizedResponse": {
      "description": "UnauthorizedResponse returns 401.",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "description": "The following syntax must be used in the Authorization header: Bearer TOKEN",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}