// Package webapi Web API
//
// This is the API for the application.
//
// Swagger 2.0 Spec - generated by [go-swagger](https://github.com/go-swagger/go-swagger)
//
// Schemes: http
// Host: localhost:8080
// BasePath: /
// Version: 2.0
//
// Consumes:
// - application/x-www-form-urlencoded
//
// Produces:
// - application/json
//
// SecurityDefinitions:
// token:
//   type: apiKey
//   name: Authorization
//   in: header
//   description: "The following syntax must be used in the Authorization header: Bearer TOKEN"
//
// swagger:meta
package webapi

import (
	"encoding/json"
	"log"
	"net/http"
	"os"

	"app/webapi/component"
	"app/webapi/component/root"
	"app/webapi/component/user"
	"app/webapi/internal/bind"
	"app/webapi/internal/response"
	"app/webapi/pkg/database"
	"app/webapi/pkg/logger"
	"app/webapi/pkg/router"
	"app/webapi/pkg/server"
)

// *****************************************************************************
// Application Settings
// *****************************************************************************

// AppConfig contains the application settings with JSON tags.
type AppConfig struct {
	Database database.Connection `json:"Database"`
	Server   server.Server       `json:"Server"`
}

// ParseJSON unmarshals the JSON bytes to the struct.
func (c *AppConfig) ParseJSON(b []byte) error {
	return json.Unmarshal(b, &c)
}

// *****************************************************************************
// Application Logic
// *****************************************************************************

// Boot will run the main application.
func Boot(config *AppConfig, appLogger logger.ILog) *router.Mux {
	// Set up the dependencies.
	db := Database(config.Database)
	l := logger.New(appLogger)
	b := bind.New()
	resp := response.New()

	// Create the component core.
	core := component.New(l, db, b, resp)

	// Set up the routes.
	r := router.New()
	root.New(core).Routes(r)
	user.New(core).Routes(r)

	// Set up the 404 page.
	r.Instance().NotFound = component.H(
		func(w http.ResponseWriter, r *http.Request) (int, error) {
			return http.StatusNotFound, nil
		})

	return r
}

// Database returns the database connection.
func Database(dbc database.Connection) *database.DBW {
	// Set the database password from an environment variable.
	pwd := os.Getenv("DB_PASSWORD")
	if len(pwd) > 0 {
		dbc.Password = pwd
	}

	connection, err := dbc.Connect(true)
	if err != nil {
		// Don't fail here, just show an error message.
		log.Println("DB Error:", err)
	}
	// Wrap the DB connection.
	db := database.New(connection)

	return db
}
